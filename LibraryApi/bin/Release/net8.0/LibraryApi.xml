<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LibraryApi</name>
    </assembly>
    <members>
        <member name="T:BookController">
            <summary>
            Handles book-related operations.
            </summary>
        </member>
        <member name="M:BookController.GetBooks">
            <summary>
            Return a list of all books.
            </summary>
            <returns>A list of books.</returns>
        </member>
        <member name="M:BookController.GetBookById(System.Int32)">
            <summary>
            Return a book by its ID.
            </summary>
            <param name="id">The unique ID of the book.</param>
            <returns>The book with the given ID, or a 404 if not found.</returns>
        </member>
        <member name="M:BookController.CreateBook(LibraryApi.DTOs.CreateBookDTO)">
            <summary>
            Create a book.
            </summary>
            <param name="newBookDTO">DTO read from body</param>
            <returns></returns>
        </member>
        <member name="M:BookController.UpdateBook(LibraryApi.Models.Book)">
            <summary>
            Update Book Data
            </summary>
            <param name="updatedBook"></param>
            <returns>Code 200 or Forbid on bad permission.</returns>
        </member>
        <member name="M:BookController.DeleteBook(System.Int32)">
            <summary>
            Delete Book by it`s Id
            </summary>
            <param name="id">Book id</param>
            <returns>Code 200 or Forbid on bad permission.</returns>
        </member>
        <member name="M:BookController.GetBooksByCategory(LibraryApi.Models.BookCategory)">
            <summary>
            Searches books by a category.
            </summary>
            <param name="category">The category to search for.</param>
            <remarks>This method will be deprecated in the next release. Use `/Books/AdvancedSearch` instead.</remarks>
            <returns>A list of books in the given category.</returns>
        </member>
        <member name="M:BookController.GetBooksByAuthor(System.String)">
            <summary>
            Retrieves books by an author.
            </summary>
            <param name="author">The author's name.</param>
            <returns>A list of books written by the specified author.</returns>
        </member>
        <member name="M:ReservationController.GetAllReservations">
            <summary>
            Return a list of all reservations.
            </summary>
            <returns>List of reservations</returns>
        </member>
        <member name="M:ReservationController.GetReservationById(System.Int32)">
            <summary>
            Return a reservation by its Id
            </summary>
            <param name="reservationId"> ReservationID</param>
            <returns>Reservation with given reservationId</returns>
        </member>
        <member name="M:ReservationController.ReserveBookById(System.Int32)">
            <summary>
            Reserve a book with given id.
            </summary>
            <param name="bookId">Specific bookId</param>
            <returns>New reservation or Code 400 on Exception</returns>
        </member>
        <member name="M:ReservationController.ReturnBookById(System.Int32)">
            <summary>
            Return a book (delete reservation)
            </summary>
            <param name="reservationId">Id of the reservation.</param>
            <returns>Code 200 and success message.</returns>
        </member>
        <member name="M:ReservationController.GetUserReservations(System.Int32)">
            <summary>
            Search for reservations assigned to specific user.
            </summary>
            <param name="userId">Unique user ID.</param>
            <returns>List of reservations assigned to specific user.</returns>
        </member>
        <member name="M:UserController.GetAllUsers">
            <summary>
            Get list of users
            </summary>
            <returns>List of Users</returns>
        </member>
        <member name="M:UserController.GetUserById(System.Int32)">
            <summary>
            Get User data by its id.
            </summary>
            <param name="id">User ID</param>
            <returns>User data by given id.</returns>
        </member>
        <member name="M:UserController.Register(LibraryApi.DTOs.RegisterDTO)">
            <summary>
            Register user
            </summary>
            <param name="registerDto">DTO from body</param>
            <returns></returns>
        </member>
        <member name="M:UserController.GetMe">
            <summary>
            Get logged in user data
            </summary>
            <returns>Current user data</returns>
        </member>
        <member name="M:UserController.Login(LibraryApi.DTOs.LoginDTO)">
            <summary>
            Authorize user
            </summary>
            <param name="loginDto"></param>
            <returns></returns>
        </member>
        <member name="M:UserController.DeleteUser(System.Int32)">
            <summary>
            Remove user from Db by id
            </summary>
            <param name="userId">Specific user Id</param>
            <returns></returns>
        </member>
        <member name="T:LibraryApi.Migrations.InitialCreate">
            <inheritdoc />
        </member>
        <member name="M:LibraryApi.Migrations.InitialCreate.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:LibraryApi.Migrations.InitialCreate.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:LibraryApi.Migrations.InitialCreate.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:LibraryApi.Migrations.ReservationsTable">
            <inheritdoc />
        </member>
        <member name="M:LibraryApi.Migrations.ReservationsTable.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:LibraryApi.Migrations.ReservationsTable.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:LibraryApi.Migrations.ReservationsTable.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:LibraryApi.Migrations.UsersTable">
            <inheritdoc />
        </member>
        <member name="M:LibraryApi.Migrations.UsersTable.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:LibraryApi.Migrations.UsersTable.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:LibraryApi.Migrations.UsersTable.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:LibraryApi.Migrations.ChangeBookCategory">
            <inheritdoc />
        </member>
        <member name="M:LibraryApi.Migrations.ChangeBookCategory.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:LibraryApi.Migrations.ChangeBookCategory.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:LibraryApi.Migrations.ChangeBookCategory.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
    </members>
</doc>
